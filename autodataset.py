# -*- coding: utf-8 -*-
"""AutoDataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zmv0e1F85Jyk3rccxwZS8HcNabB2AWmH
"""

!pip install python-dotenv==1.0.0
!pip install openai

from openai import OpenAI
from dotenv import load_dotenv, find_dotenv
import os

_ = load_dotenv(find_dotenv())

#os.environ.get("OPENAI_API_KEY")

client = OpenAI()

client.api_key = os.environ.get("OPENAI_API_KEY")

model_4 = "gpt-4-0125-preview"
model_3 = "gpt-3.5-turbo-16k"

# Папка с текстовыми файлами для перевода
input_dir = './input_directory/'

# Функция для чтения текстовых файлов и запись в массив
def read_files(directory):

  texts = []

  for filename in os.listdir(directory):
    if filename.endswith('.txt'):
      with open(os.path.join(directory, filename), 'r', encoding='utf-8') as file:
        texts.append(file.read())

  return texts

# Функция для записи текста в файлы в новой директории
def write_files(texts, list_files, language):

  dir_output = './output_directory/'

  if not os.path.exists(dir_output):
    os.makedirs(dir_output)

  for i, text in enumerate(texts):
    with open(os.path.join(dir_output, f'{language} - {list_files[i]}'), 'w', encoding='utf-8') as file:
      file.write(text)

# Функция для перевода на русский язык
def translate_to_russian(texts: list, model=model_3) -> list:

  system_prompt_to_russian = "Translate the following Polish text into Russian:\nPolish:\nRussian:"

  lst_russian = []

  for text in texts:

    response = client.chat.completions.create(
        model=model,
        seed=1234,
        temperature=0,
        messages=[
            {"role": "system", "content": system_prompt_to_russian},
            {"role": "user", "content": text},
        ],
    )

    lst_russian.append(response.choices[0].message.content)

  return lst_russian

# Функция для перевода на Польский язык - PL и обратно
def translate_to_polish(input_dir: str, model=model_3):

  # Список файлов в этой папке
  list_files = os.listdir(input_dir)

  # Получим список текстов из файла
  texts = read_files(input_dir)

  # Промпты
  system_prompt_to_polish = "Translate the following Russian text into Polish:\nRussian: \nPolish:"
  system_prompt_to_russian = "Translate the following Polish text into Russian:\nPolish:\nRussian:"

  # Здесь будут хранится переводы
  lst_polish = []
  lst_russian = []

  # Перевод всех текстов на польский и запись в массив
  for text in texts:

    response = client.chat.completions.create(
        model=model,
        seed=1234,
        temperature=0,
        messages=[
            {"role": "system", "content": system_prompt_to_polish},
            {"role": "user", "content": text},
        ],
    )

    lst_polish.append(response.choices[0].message.content)


  # Перевод всех текстов на русский и запись в массив
  lst_russian = translate_to_russian(lst_polish)

  language = 'PL'

  # Создание папки и файлов c переводом
  write_files(lst_russian, list_files, language)

# Функция для перевода на Японский язык - JP и обратно
def translate_to_japanese(input_dir: str, model=model_3):

  # Список файлов в этой папке
  list_files = os.listdir(input_dir)

  # Получим список текстов из файла
  texts = read_files(input_dir)

  # Промпты
  system_prompt_to_japanese = "Translate the following Russian text into Japanese:\nRussian: \Japanese:"
  system_prompt_to_russian = "Translate the following Polish text into Russian:\nPolish:\nRussian:"

  # Здесь будут хранится переводы
  lst_japanese = []
  lst_russian = []

  # Перевод всех текстов на польский и запись в массив
  for text in texts:

    response = client.chat.completions.create(
        model=model,
        seed=1234,
        temperature=0,
        messages=[
            {"role": "system", "content": system_prompt_to_japanese},
            {"role": "user", "content": text},
        ],
    )

    lst_japanese.append(response.choices[0].message.content)


  # Перевод всех текстов на русский и запись в массив
  lst_russian = translate_to_russian(lst_japanese)

  language = 'JP'

  # Создание папки и файлов c переводом
  write_files(lst_russian, list_files, language)

# Пример работы с польского
translate_to_polish(input_dir)

# Пример работы с японского
translate_to_japanese(input_dir)